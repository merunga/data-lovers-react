{"version":3,"sources":["components/Logo/styles.module.css","components/Content/styles.module.css","components/Logo/index.js","components/Header/index.js","components/Filter/index.js","components/Content/PaginationControl.js","components/Content/index.js","lib/utils/fetch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","className","styles","img","alt","Header","Row","Col","md","Filter","setSearchText","setUrl","useState","tempSearchText","setTempSearchText","Form","onSubmit","e","preventDefault","Group","Control","size","type","placeholder","onChange","target","value","PaginationControl","prev","next","pagination","Button","onClick","defaultProps","Content","searchText","url","info","results","data","setData","loading","setLoading","useEffect","fetch","then","response","json","error","jsonResponse","Container","fluid","length","map","character","key","id","xs","sm","lg","Card","Img","variant","image","Body","Title","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4bed4116.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"styles_img__RUg1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"styles_pagination__2MEES\"};","import React from 'react';\nimport styles from './styles.module.css';\n\nconst Logo = () => (\n  <img\n    src=\"https://upload.wikimedia.org/wikipedia/en/c/c8/Rick_and_Morty_logo.png\"\n    className={styles.img}\n    alt=\"logo\"\n  />\n);\n\nexport default Logo;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Logo from '../Logo';\n\nconst Header = () => (\n  <Row className=\"justify-content-md-center\">\n    <Col md={4} className=\"text-center\">\n      <Logo />\n    </Col>\n  </Row>\n);\n\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\n\nconst Filter = ({ setSearchText, setUrl }) => {\n  const [tempSearchText, setTempSearchText] = useState('');\n  const onSubmit = (e) => {\n    e.preventDefault()\n    setSearchText(tempSearchText);\n    setUrl('');\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group>\n        <Form.Control\n          size=\"lg\"\n          type=\"text\"\n          placeholder=\"Busca un personaje\"\n          onChange={(e) => {\n            setTempSearchText(e.target.value);\n          }}\n          value={tempSearchText}\n        />\n      </Form.Group>\n    </Form>\n  );\n}\n\nFilter.propTypes = {\n  setSearchText: PropTypes.func.isRequired,\n  setUrl: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport styles from './styles.module.css';\n\nconst PaginationControl = ({ prev, next, setUrl }) => (\n  <Row className={styles.pagination}>\n    <Col className=\"text-center\">\n      {prev && (\n        <Button onClick={() => {setUrl(prev)}}>prev</Button>\n      )}\n    </Col>\n    <Col className=\"text-center\">\n      {next && (\n        <Button onClick={() => {setUrl(next)}}>next</Button>\n      )}\n    </Col>\n  </Row>\n);\n\nPaginationControl.propTypes = {\n  prev: PropTypes.string,\n  next: PropTypes.string,\n  setUrl: PropTypes.func.isRequired\n};\n\nPaginationControl.defaultProps = {\n  prev: '',\n  next: '',\n};\n\nexport default PaginationControl;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nimport fetch from '../../lib/utils/fetch';\nimport PaginationControl from './PaginationControl';\n\nconst Content = ({ searchText, url, setUrl }) => {\n  const [data, setData] = useState({ info: {}, results: [] });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(url, searchText).then((jsonResponse) => {\n      setData(jsonResponse);\n      setLoading(false);\n    })\n  }, [url, searchText]);\n\n  if (loading) {\n    return 'Loading...';\n  }\n\n  const pagination = <PaginationControl prev={data.info.prev} next={data.info.next} setUrl={setUrl}/>;\n\n  return (\n    <Container fluid>\n      {pagination}\n      <Row>\n        {data.results.length === 0 && (<h3>No se encontraron resultados</h3>)}\n        {data.results.map((character) => (\n          <Col key={character.id} xs={12} sm={6} md={4} lg={3}>\n            <Card>\n              <Card.Img variant=\"top\" src={character.image} />\n              <Card.Body>\n                <Card.Title>{character.name}</Card.Title>\n              </Card.Body>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n      {pagination}\n    </Container>\n  );\n};\n\nContent.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  setUrl: PropTypes.string.isRequired,\n};\n\nContent.defaultProps = {\n  url: '',\n};\n\nexport default Content;\n","export default (url, searchText) => {\n  return fetch(url || `https://rickandmortyapi.com/api/character${searchText ? `?name=${searchText}` : ''}`)\n    .then((response) => response.json())\n    .then((data) => {\n      if (data.error) {\n        return {\n          info: {},\n          results: [],\n        }\n      }\n      return data;\n    });\n};\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Header from './components/Header';\nimport Filter from './components/Filter';\nimport Content from './components/Content';\n\nfunction App() {\n  const [searchText, setSearchText] = useState('');\n  const [url, setUrl] = useState('');\n\n  return (\n    <Container>\n      <Header />\n      <Filter setSearchText={setSearchText} setUrl={setUrl} />\n      <Content searchText={searchText} url={url} setUrl={setUrl} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}